name: Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm llvm-dev libgdal-dev build-essential
      
      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          activate-environment: voxcity
          use-only-tar-bz2: true
      
      - name: Cache conda env
        uses: actions/cache@v3
        with:
          path: ${{ env.CONDA }}/envs
          key: conda-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('environment.yml') }}
          restore-keys: |
            conda-${{ runner.os }}-${{ matrix.python-version }}-
      
      - name: Install conda dependencies
        shell: bash -l {0}
        run: |
          conda install -y -c conda-forge \
            gdal \
            numba \
            llvmlite \
            rtree \
            rasterio=1.3.11 \
            fiona \
            geopandas \
            shapely
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        id: cache-poetry
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-
      
      - name: Configure Poetry
        shell: bash -l {0}
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      
      - name: Install dependencies
        shell: bash -l {0}
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --without conda-deps
      
      - name: Run tests with coverage
        shell: bash -l {0}
        run: |
          poetry run pytest --cov=voxcity --cov-report=xml
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true